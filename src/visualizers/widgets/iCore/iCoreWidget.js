/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Sat Jul 26 2025 15:33:55 GMT-0400 (Eastern Daylight Time).
 */

define(['css!./styles/iCoreWidget.css'], function () {
    'use strict';

    var WIDGET_CLASS = 'i-core';

    function iCoreWidget(logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;

        this.nodes = {};
        this._initialize();

        this._logger.debug('ctor finished');
    }

    iCoreWidget.prototype._initialize = function () {
        var width = this._el.width(),
            height = this._el.height(),
            self = this;

        // set widget class
        this._el.addClass(WIDGET_CLASS);

        // Create header and results area
        this._el.append('<h3>Loop Detection Analysis</h3>');
        this._el.append('<div id="loop-detection-results" style="margin: 10px 0; padding: 10px; border: 1px solid #ddd; background-color: #f9f9f9;"></div>');
        this._el.append('<h4>Automatic Test Results:</h4>');
        this._el.append('<div id="auto-test-results" style="margin: 10px 0; padding: 10px; border: 1px solid #e0e0e0; background-color: #f5f5f5; max-height: 200px; overflow-y: auto;"></div>');
        this._el.append('<h4>Node Information:</h4>');
        this._el.append('<div id="node-list" style="margin: 10px 0;"></div>');

        // Initialize results area
        this._updateResults('Starting automatic loop detection tests...', 'info');
        this._updateAutoTestResults('ðŸš€ Initializing automatic tests...');

        // Registering to events can be done with jQuery (as normal)
        this._el.on('dblclick', function (event) {
            event.stopPropagation();
            event.preventDefault();
            self.onBackgroundDblClick();
        });
    };

    iCoreWidget.prototype._updateResults = function (message, type) {
        var resultsDiv = this._el.find('#loop-detection-results'),
            className = 'alert-info';
        
        if (type === 'success') {
            className = 'alert-success';
        } else if (type === 'warning') {
            className = 'alert-warning';
        } else if (type === 'error') {
            className = 'alert-danger';
        }
        
        resultsDiv.attr('class', 'alert ' + className);
        resultsDiv.html('<strong>Loop Detection:</strong> ' + message);
    };

    iCoreWidget.prototype._updateAutoTestResults = function (message) {
        var autoTestDiv = this._el.find('#auto-test-results');
        var currentContent = autoTestDiv.html();
        var timestamp = new Date().toLocaleTimeString();
        var newLine = '<div style="margin: 2px 0; font-family: monospace; font-size: 12px;">' + 
                     '[' + timestamp + '] ' + message + '</div>';
        autoTestDiv.html(currentContent + newLine);
        
        // Auto-scroll to bottom
        autoTestDiv.scrollTop(autoTestDiv.prop('scrollHeight'));
    };

    iCoreWidget.prototype.showLoopDetectionResults = function (result, nodeName) {
        if (result.hasLoop) {
            var message = 'LOOP DETECTED in "' + nodeName + '"! ';
            message += 'Loop elements: ' + result.elements.join(' â†’ ') + '. ';
            message += 'Code generation would be infinite.';
            this._updateResults(message, 'warning');
        } else {
            var message = 'No loops detected in "' + nodeName + '". Sequential code generation is safe.';
            this._updateResults(message, 'success');
        }
    };

    iCoreWidget.prototype.showAnalysisError = function (nodeName, error) {
        var message = 'Error analyzing "' + nodeName + '": ' + error;
        this._updateResults(message, 'error');
    };

    iCoreWidget.prototype.showAnalysisStart = function (nodeName, nodeType) {
        var message = 'Analyzing "' + nodeName + '" (Type: ' + nodeType + ')...';
        this._updateResults(message, 'info');
    };

    iCoreWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
    };

    // Adding/Removing/Updating items
    iCoreWidget.prototype.addNode = function (desc) {
        if (desc) {
            // Add node to a table of nodes
            var node = document.createElement('div'),
                nodeList = this._el.find('#node-list'),
                label = 'children';

            if (desc.childrenIds.length === 1) {
                label = 'child';
            }

            this.nodes[desc.id] = desc;
            node.innerHTML = '<div style="margin: 5px 0; padding: 5px; border-left: 3px solid #007bff;">' +
                '<strong>' + desc.name + '</strong> (click to view)<br/>' +
                '<small>Has ' + desc.childrenIds.length + ' ' + label + '</small>' +
                '</div>';

            node.style.cursor = 'pointer';
            node.onclick = function () {
                this._widget.onNodeClick(desc.id);
            }.bind({_widget: this});

            nodeList.append(node);
        }
    };

    iCoreWidget.prototype.updateNode = function (desc) {
        if (desc) {
            this._logger.debug('Updating node:', desc.name);
            // Find and update existing node or add if doesn't exist
            this.addNode(desc);
        }
    };

    iCoreWidget.prototype.removeNode = function (gmeId) {
        delete this.nodes[gmeId];
        // Remove from display
        var nodeList = this._el.find('#node-list');
        nodeList.find('[data-id="' + gmeId + '"]').remove();
    };

    // Widget event handlers
    iCoreWidget.prototype.onNodeClick = function (id) {
        this._logger.debug('Node clicked:', id);
        // This will be overridden by the control
    };

    iCoreWidget.prototype.onBackgroundDblClick = function () {
        this._logger.debug('Background double-clicked');
    };

    // Life cycle methods
    iCoreWidget.prototype.onActivate = function () {
        this._logger.debug('iCoreWidget has been activated');
    };

    iCoreWidget.prototype.onDeactivate = function () {
        this._logger.debug('iCoreWidget has been deactivated');
    };

    iCoreWidget.prototype.destroy = function () {
        this._logger.debug('iCoreWidget is being destroyed');
    };

    return iCoreWidget;
});
